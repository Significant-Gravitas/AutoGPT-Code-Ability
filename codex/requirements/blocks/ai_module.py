import logging

from codex.common.ai_block import (
    AIBlock,
    Identifiers,
    ValidatedResponse,
    ValidationError,
)
from codex.prompts.claude.requirements.NestJSDocs import (
    NEST_JS_CRUD_GEN,
    NEST_JS_FIRST_STEPS,
    NEST_JS_MODULES,
    NEST_JS_SQL,
)
from codex.requirements.model import ModuleRefinement, ModuleResponse

logger = logging.getLogger(__name__)


class ModuleGenerationBlock(AIBlock):
    """
    This is a block that handles, calling the LLM, validating the response,
    storing llm calls, and returning the response to the user

    """

    # The name of the prompt template folder in codex/prompts/{model}
    prompt_template_name = "requirements/module/generation"
    # Model to use for the LLM
    model = "gpt-4-0125-preview"
    # Should we force the LLM to reply in JSON
    is_json_response = True
    # If we are using is_json_response, what is the response model
    pydantic_object = ModuleResponse

    def validate(
        self, invoke_params: dict, response: ValidatedResponse
    ) -> ValidatedResponse:
        """
        The validation logic for the response. In this case its really simple as we
        are just validating the response is a Clarification model. However, in the other
        blocks this is much more complex. If validation failes it triggers a retry.
        """
        try:
            model = ModuleResponse.model_validate_json(response.response, strict=False)
            response.response = model
        except Exception as e:
            raise ValidationError(f"Error validating response: {e}")

        return response

    async def create_item(
        self, ids: Identifiers, validated_response: ValidatedResponse
    ):
        """
        This is where we would store the response in the database

        Atm I don't have a database model to store QnA responses, but we can add one
        """
        pass


class ModuleRefinementBlock(AIBlock):
    """
    This is a block that handles, calling the LLM, validating the response,
    storing llm calls, and returning the response to the user

    """

    # The name of the prompt template folder in codex/prompts/{model}
    prompt_template_name = "requirements/module/refinement"
    # Model to use for the LLM
    model = "gpt-4-0125-preview"
    # Should we force the LLM to reply in JSON
    is_json_response = True
    # If we are using is_json_response, what is the response model
    pydantic_object = ModuleRefinement

    def validate(
        self, invoke_params: dict, response: ValidatedResponse
    ) -> ValidatedResponse:
        """
        The validation logic for the response. In this case its really simple as we
        are just validating the response is a Clarification model. However, in the other
        blocks this is much more complex. If validation failes it triggers a retry.
        """
        try:
            model = ModuleRefinement.model_validate_json(
                response.response, strict=False
            )
            response.response = model
        except Exception as e:
            raise ValidationError(f"Error validating response: {e}")

        return response

    async def create_item(
        self, ids: Identifiers, validated_response: ValidatedResponse
    ):
        """
        This is where we would store the response in the database

        Atm I don't have a database model to store QnA responses, but we can add one
        """
        pass


if __name__ == "__main__":
    """
    This is a simple test to run the block
    """
    from asyncio import run

    from openai import AsyncOpenAI
    from prisma import Prisma

    from codex.common.test_const import identifier_1

    ids = identifier_1
    db_client = Prisma(auto_register=True)
    oai = AsyncOpenAI()

    task: str = "'The Tutor App is an app designed for tutors to manage their clients, schedules, and invoices. \n\nIt must support both the client and tutor scheduling, rescheduling and canceling appointments, and sending invoices after the appointment has passed.\n\nClients can sign up with OAuth2 or with traditional sign-in authentication. If they sign up with traditional authentication, it must be safe and secure. There will need to be password reset and login capabilities. \n\nThere will need to be authorization for identifying clients vs the tutor.\n\nAdditionally, it will have proper management of financials, including invoice management and payment tracking. This includes things like paid/failed invoice notifications, unpaid invoice follow-up, summarizing d/w/m/y income, and generating reports.'"
    project_description: str = "The Tutor App is an application designed to help tutors manage their tutoring business and clients manage their tutoring sessions. The key users are both tutors and clients. Tutors need features to set availability, manage clients, schedule sessions, send invoices and track payments. Clients need to find tutors, book and manage appointments, communicate with tutors, and pay invoices. Core features like user accounts, authentication, notifications span both groups. But the functionality aims to let tutors run their services smoothly while giving clients control over their tutoring.'"
    product_description: str = "TutorMate is a dedicated app designed to streamline the management of tutoring services. It serves as a centralized platform for tutors to manage clients, appointments, and invoices with ease. For clients, it offers a seamless way to book, reschedule, or cancel sessions, and manage payments. TutorMate supports OAuth2 and traditional sign-in authentication for enhanced security. It features robust password reset and login capabilities, along with distinct authorization methods for distinguishing between tutors and clients. Financial management is a cornerstone of TutorMate, including invoice generation, payment tracking, income summary reports, and notification systems for payment status. The app is developed with scalability and international use in mind, automatically adjusting for different time zones and supporting secure financial transactions."
    joint_q_and_a: str = """
'- "Do we need a front end for this: "The Tutor App is an application designed to help tutors manage their tutoring business and clients manage their tutoring sessions. The key users are both tutors and clients. Tutors need features to set availability, manage clients, schedule sessions, send invoices and track payments. Clients need to find tutors, book and manage appointments, communicate with tutors, and pay invoices. Core features like user accounts, authentication, notifications span both groups. But the functionality aims to let tutors run their services smoothly while giving clients control over their tutoring."": "Yes" : Reasoning: "Considering the requirements specified for the Tutor App, a front end is essential. The app aims to provide an accessible interface for two distinct user types (tutors and clients), each with specific needs and interactions with the application. Tutors need to manage various aspects of their tutoring business, including setting availability, managing clients, and handling finances. Clients, on the other hand, need to easily find tutors, book appointments, and communicate. These interactions require a user-friendly, interactive front end that makes these tasks efficient and intuitive. Moreover, features like authentication and notifications imply direct, real-time engagement with the app, reinforcing the need for a well-designed front end. Without it, achieving the application\'s goals of streamlining the business and learning experience would be impractical, if not impossible."\n- "Who is the expected user of this: "The Tutor App is an application designed to help tutors manage their tutoring business and clients manage their tutoring sessions. The key users are both tutors and clients. Tutors need features to set availability, manage clients, schedule sessions, send invoices and track payments. Clients need to find tutors, book and manage appointments, communicate with tutors, and pay invoices. Core features like user accounts, authentication, notifications span both groups. But the functionality aims to let tutors run their services smoothly while giving clients control over their tutoring."": "Tutors and clients" : Reasoning: "The Tutor App serves two main user personas: tutors and clients. For tutors, the app functions as a comprehensive business management tool, enabling features like setting availability, managing client relations, scheduling, and handling finances. It’s designed to simplify the operational aspects of tutoring, allowing tutors to focus on delivering quality education. For clients, the app acts as a bridge to access tutoring services. They can effortlessly search for tutors, book and manage sessions, and handle payments. This dual approach caters to the full lifecycle of tutoring services, from discovery and learning to payment. The inclusion of core features like user accounts, authentication, and notifications for both groups emphasizes the app’s goal to foster seamless interaction between tutors and clients, highlighting its commitment to creating a beneficial environment for teaching and learning."\n- "What is the skill level of the expected user of this: "The Tutor App is an application designed to help tutors manage their tutoring business and clients manage their tutoring sessions. The key users are both tutors and clients. Tutors need features to set availability, manage clients, schedule sessions, send invoices and track payments. Clients need to find tutors, book and manage appointments, communicate with tutors, and pay invoices. Core features like user accounts, authentication, notifications span both groups. But the functionality aims to let tutors run their services smoothly while giving clients control over their tutoring."": "Varied" : Reasoning: "Considering the description of the Tutor App, it\'s clear that the expected user base consists of two main personas: tutors and clients. Each of these personas has different roles and objectives within the app, which in turn implies different levels of technology proficiency. Tutors are expected to manage more complex tasks related to running a business such as setting their availability, managing client information, scheduling sessions, and managing finances. On the other hand, clients are primarily looking to find tutors, book and manage appointments, and make payments. Given these tasks, it’s reasonable to assume a variance in technical skill levels among the users. Tutors might possess a moderate to high level of technological proficiency, given their need to manage multiple aspects of their tutoring business through the app. Clients, however, may range from low to high technological proficiency, as their primary interaction with the app involves searching, booking, and communicating. The app should therefore be designed to be intuitive and accessible, catering to the widest possible range of user skill levels to ensure both tutors and clients can navigate and utilize its features effectively."\n- "What types of notifications should the system support for both tutors and clients, and through what channels (SMS, email, in-app)?": "Support email and in-app notifications for all users, with an optional SMS feature based on budget and user preferences." : Reasoning: "Notifications are vital for keeping users engaged and informed. Understanding the types and channels of notifications can shape the development of notification services and APIs."\n- "How should the app handle time zones for scheduling appointments, considering users might be in different regions?": "Implement functionality to adjust and display time based on the user’s local time zone, using UTC as the standard for backend storage." : Reasoning: "Properly handling time zones is crucial for a scheduling app to avoid confusion and missed appointments."\n- "What level of customization will tutors have over their profile and scheduling settings?": "Tutors can customize their profile with essential business information and manage availability settings to enhance user experience without overcomplicating the UI/UX." : Reasoning: "Enhancing tutor profiles with customization options can improve match rates but may increase complexity."\n- "What specific security measures will be implemented for authentication, especially for traditional sign-ins?": "Secure traditional sign-ins with strong password requirements, hashed password storage, SSL for data in transit, and evaluate the need for 2FA based on user feedback." : Reasoning: "With options for OAuth2 and traditional sign-ins, ensuring security for passwords and user data is imperative."\n- "How should the app facilitate communication between tutors and clients?": "Implement an in-app messaging system for real-time communication, ensuring it is secure, user-friendly, and privacy-compliant." : Reasoning: "Direct communication is a key feature for scheduling and updates. Determining the channels and mechanisms is crucial for defining the scope of development."\n- "Which payment gateways or services will the app integrate with for handling invoices and payments?": "Integrate with reputable payment services like Stripe and PayPal, ensuring the integration is secure and user-friendly." : Reasoning: "Choosing the right payment gateway is essential for simplifying financial transactions and ensuring user trust."\n- "What reporting features are essential for tutors to manage their finances within the app?": "Implement essential reporting features for financial management, including income summaries, invoice tracking, and expense reports, with room for customization." : Reasoning: "Financial management tools are key for tutors to track their business. Identifying crucial reporting features will guide the design of this functionality."\n- "Will there be a rating or feedback system for tutors and clients to assess their experiences?": "A rating and feedback system for both tutors and clients will be implemented, designed to be fair, transparent, and resistant to manipulation." : Reasoning: "A feedback system can enhance trust and quality on the platform, but it requires careful consideration to be balanced and fair."\n- "How will the app accommodate users with disabilities or those requiring assistive technologies?": "The app will be designed with accessibility in mind, complying with standard guidelines and including features that support users with various needs." : Reasoning: "Accessibility is a fundamental aspect of app design, especially for a diverse user base. Understanding these requirements early aids compliance and inclusivity."\n- "What kind of support or documentation will be provided to users to facilitate onboarding and troubleshooting?": "Provide detailed documentation, onboarding tutorials, and an easily navigable FAQ section to ensure users have all the resources they need." : Reasoning: "Effective onboarding and accessible support materials can dramatically improve user satisfaction and reduce support requests."\n'
    """
    thoughts: str = """
'\n\nHuman: Your task is to "The Tutor App is an app designed for tutors to manage their clients, schedules, and invoices. \n\nIt must support both the client and tutor scheduling, rescheduling and canceling appointments, and sending invoices after the appointment has passed.\n\nClients can sign up with OAuth2 or with traditional sign-in authentication. If they sign up with traditional authentication, it must be safe and secure. There will need to be password reset and login capabilities. \n\nThere will need to be authorization for identifying clients vs the tutor.\n\nAdditionally, it will have proper management of financials, including invoice management and payment tracking. This includes things like paid/failed invoice notifications, unpaid invoice follow-up, summarizing d/w/m/y income, and generating reports."\n\nAnswer as an expert product owner.\n\nyour memory is based on a google like search. When you want more information send search:<query> and I\'ll send you back the reply.\n\nyou can ask the user questions by sending ask:<query> and I\'ll send you back the reply. Make sure to ask broad questions that help guide your understanding\n\nWhen you feel you have finished getting the info you need or are confident it\'s not there, summarize the memory you\'ve built and send finished:<summary>. make sure you don\'t reply anything before the "finished:<summary>" or it will confuse the human\n\nOnly reply with one message at a time so that the user isn\'t overwhelmed.\n\nOnly reply with the specified tags.\n\nAssistant: \nask: Who is the primary user for this application?\n\nHuman:Unfortunately I do not have enough context to definitively state who the primary user for a particular application would be. Applications can have different target users depending on their purpose and functionality. Some things that could help determine the primary user could be:\n\n- What is the main purpose or function of the application? Different types of apps may target different audiences (e.g. gaming apps target gamers, productivity apps target professionals, etc.)\n\n- Who is the application designed for? The UI/UX design and features may give clues as to the intended user base.\n\n- Who is the developer or company that created the application? Understanding their typical customer base could indicate who they had in mind as users.\n\n- What permissions and data does the app require or have access to? This could imply the expected user type based on what functionality is offered.\n\n- Are there any marketing materials or app descriptions that describe the target user base? Oftentimes there is explicit information on ideal users.\n\nWithout more context about which specific application you have in mind, I unfortunately cannot definitively name the expected primary user. Let me know if you can provide any additional details about the app and I\'m happy to try to make a more educated guess!\n\nAssistant:search: The Tutor App tutor schedule management clients invoices appointments OAuth2 sign-in authentication password reset login authorization identifying clients vs tutor financials invoice management payment tracking paid/failed invoice notifications unpaid invoice follow-up summarizing income reports\n\nHuman:Unfortunately I do not have enough context to provide specific feedback on features for a tutor scheduling and management app. However, some general capabilities that may be useful include:\n\n- User account management with sign-up, login, authentication, password reset, etc. Using a standard authorization protocol like OAuth 2.0 can simplify this.\n\n- Separate portals/views for tutors vs clients with appropriate functionality for each. Tutors need schedule/appointment management, client management, invoice/payment tracking, etc. Clients need to book, pay and manage appointments.\n\n- Client profiles/accounts to store info like name, contact details, billing info. This keeps client data organized and allows things like recurring appointments or billing.\n\n- Tutor calendar/availability management. Tutors need to indicate their availabilities and block off times they cannot take appointments.\n\n- Appointment management system - tutors and clients can add, edit, cancel, reschedule appointments. Notifications for upcoming sessions.\n\n- Invoicing system - automated invoice generation and tracking tied to appointments. Status indicators for paid/unpaid/failed payments. Reminders for unpaid invoices.\n\n- Payment processing and tracking against invoices. Recording payments as they come in and reconciling with invoices.\n\n- Financial/earnings reporting for tutors - reports on net earnings, paid invoices over time, appointment volume, etc. to analyze their tutoring business.\n\n- Notifications to both clients and tutors via email or SMS for unpaid invoices, appointment reminders/changes, etc. to improve engagement.\n\nLet me know if any specific features come to mind and I\'m happy to provide additional suggestions on how those could be implemented.\n\nAssistant:'
    """

    features_str: str = """[{"name": "Dual Authentication System", "thoughts": "Balancing security with ease of use is paramount. Offering both OAuth2 for those desiring quick access and a traditional sign-in for others emphasizes this.", "description": "A flexible authentication system allowing users to sign up and log in either via OAuth2 for seamless integration with existing accounts or through a secure, traditional sign-in process.", "considerations": "The need to implement stringent security measures, especially for the traditional sign-in, to protect user data.", "risks": "Potential complexity in maintaining two parallel systems and ensuring both are secure against breaches.", "needed_external_tools": "OAuth2 integration services, Secure password storage and hashing tools", "priority": "CRITICAL"}, {"name": "Comprehensive Scheduling System", "thoughts": "The core functionality that must cater to both setting and managing appointments by tutors and clients, including modifications and cancellations.", "description": "An intuitive scheduling interface that allows for the creation, rescheduling, and cancellation of appointments. This system supports real-time updates and notifications.", "considerations": "User experience should remain a priority, ensuring the system is intuitive for both clients and tutors.", "risks": "Synchronization issues leading to double bookings or missed appointments.", "needed_external_tools": "Calendar API services, Push notification services", "priority": "CRITICAL"}, {"name": "Advanced Financial Management", "thoughts": "Providing a detailed yet easy-to-navigate financial overview, including invoicing and payment tracking, is essential for tutor's business operations.", "description": "A robust financial management module for handling invoices, tracking payments, and following up on unpaid invoices. Features include financial summary reports for various time frames.", "considerations": "Ease of understanding and interaction for users with varying financial literacy.", "risks": "Complexity of financial data handling and ensuring accuracy in reports and summaries.", "needed_external_tools": "Invoice management software integration, Payment gateway services", "priority": "HIGH"}, {"name": "Role-Based Authorization", "thoughts": "Critical for differentiating access levels between tutors and clients to ensure both parties only access relevant data and functionalities.", "description": "An authorization framework that differentiates user roles, granting access permissions according to the user's role as a tutor or client.", "considerations": "Ensuring a seamless yet secure method of identifying and authorizing users based on their roles.", "risks": "Potential security vulnerabilities if role distinctions are not properly enforced.", "needed_external_tools": "Role-based access control (RBAC) systems", "priority": "HIGH"}]"""
    requirements_q_and_a_string: str = """'- "do we need db?": "Yes" : Reasoning: "Considering the need to store a vast amount of data like user profiles, schedules, invoices, and payments securely, a database is essential for organizing and managing this information efficiently."\n- "do we need an api for talking to a front end?": "Yes" : Reasoning: "Given the separation of concerns and the necessity to communicate data between the server and the client-side application seamlessly, an API serves as an essential medium for this interaction."\n- "do we need an api for talking to other services?": "Yes" : Reasoning: "For features like OAuth2 authentication, payment processing, and possibly other third-party services, having an API that allows our app to communicate with these external services is crucial."\n- "do we need an api for other services talking to us?": "Yes" : Reasoning: "To facilitate interoperability and integration with other platforms or services that might need to access our application\'s functionalities, we would require an API."\n- "do we need to issue api keys for other services to talk to us?": "Yes" : Reasoning: "To ensure secured access and interaction with our API, issuing API keys to third-party services allows us to control and monitor the API usage."\n- "do we need monitoring?": "Yes" : Reasoning: "Monitoring is essential to ensure the health, performance, and security of the application, helping in timely detection and resolution of potential issues."\n- "do we need internationalization?": "Yes" : Reasoning: "Anticipating a global user base and aiming for a broader reach necessitates the support for multiple languages and regional settings."\n- "do we need analytics?": "Yes" : Reasoning: "To understand user behaviour, measure performance, and guide data-driven decisions for future improvements, integrating analytics is vital."\n- "is there monetization?": "Yes" : Reasoning: "Considering the financial management aspect and the invoicing feature, monetization strategies like subscription models could be implemented to support the application\'s sustainability."\n- "is the monetization via a paywall or ads?": "Paywall" : Reasoning: "Given the professional context of the application for tutors and their clients, a paywall relying on subscriptions provides a more seamless, ad-free experience."\n- "does this require a subscription or a one-time purchase?": "Subscription" : Reasoning: "A subscription model aligns with the ongoing nature of tutoring services, offering continuous access and support to the features and updates."\n- "is the whole service monetized or only part?": "Part" : Reasoning: "It\'s reasonable to keep core functionalities behind a paywall while offering certain basic features for free to attract and onboard users before they commit to a subscription."\n- "is monetization implemented through authorization?": "Yes" : Reasoning: "Utilizing authorization to manage access based on subscription status enables a segmented approach to feature availability, aligning with the monetization strategy."\n- "do we need authentication?": "Yes" : Reasoning: "Authentication is fundamental to identifying users and ensuring data security, especially when managing personal and financial information."\n- "do we need authorization?": "Yes" : Reasoning: "Authorization is crucial for differentiating between user roles and controlling access to functionalities specific to tutors, clients, and possibly admin users."\n- "what authorization roles do we need?": "["Tutor", "Client", "Admin"]" : Reasoning: "Given the nature of the application, separating users into distinct roles ensures appropriate access and functionality tailored to their needs."\n'"""
    requirements_as_string: str = """'{"functional": [{"thoughts": "Considering security and user distinction is vital for protecting sensitive information and ensuring appropriate system access.", "name": "User Registration and Authentication", "description": "Enables tutors and clients to register and authenticate using OAuth2 or traditional sign-in methods, with distinct role identification."}, {"thoughts": "A core feature that requires a balance of flexibility and usability to cater to the scheduling needs of all users.", "name": "Appointment Scheduling", "description": "Allows tutors and clients to book, reschedule, or cancel appointments through a calendar interface, with automatic adjustment for time zones."}, {"thoughts": "Financial management is crucial for tutors; the system must provide accurate, timely, and secure handling of transactions.", "name": "Invoice Management", "description": "Automated invoice generation and management after sessions, including payment gateway integration for secure transactions."}, {"thoughts": "Keeping users informed in real time is essential for engagement and operational efficiency.", "name": "Real-time Notifications", "description": "Sends notifications for upcoming appointments, invoice statuses, and other relevant events through the app, email, or SMS."}, {"thoughts": "Data-driven insights can empower tutors to make informed decisions to enhance their services.", "name": "Reporting and Analytics", "description": "Generates comprehensive reports and analytics on income, client satisfaction, and session outcomes for tutors."}, {"thoughts": "Direct communication can resolve uncertainties, build rapport, and improve service satisfaction.", "name": "Direct Messaging System", "description": "Facilitates secure and private communication between tutors and clients within the app."}], "nonfunctional": [{"thoughts": "A non-negotiable aspect to protect user data and build trust.", "name": "Security and Compliance", "description": "Ensures data encryption, compliance with financial regulations, and robust authentication mechanisms."}, {"thoughts": "Anticipating growth is crucial for long-term success, necessitating a flexible and robust backend architecture.", "name": "Scalability", "description": "Designed to efficiently handle increasing loads, supporting user growth through scalable infrastructure."}, {"thoughts": "Performance impacts user satisfaction directly; thus, maintaining a swift and reliable system is essential.", "name": "Performance", "description": "Ensures quick response times and high availability to facilitate a seamless user experience."}, {"thoughts": "Given the varied tech-savviness of users, the interface must be accessible and easy to navigate.", "name": "Usability", "description": "Intuitive UI/UX design catering to users with intermediate technical skills, emphasizing ease of use."}, {"thoughts": "Flexibility in handling international contexts will ensure the app\'s broader applicability and user inclusiveness.", "name": "Internationalization", "description": "Supports different time zones and potentially multiple languages to cater to a global user base."}, {"thoughts": "Considering the global scope and sensitivity of data handled, compliance with privacy laws is crucial.", "name": "Data Privacy", "description": "Adheres to local and international data protection laws to safeguard personal and financial information."}]}'"""
    system_spec = """# TutorMaster\n\n## Task \nThe Tutor App is an app designed for tutors to manage their clients,\n schedules, and invoices.\n\nIt must support both the client and tutor scheduling, rescheduling and canceling\n appointments, and sending invoices after the appointment has passed.\n\nClients can sign up with OAuth2 or with traditional sign-in authentication. If they sign\n up with traditional authentication, it must be safe and secure. There will need to be\n password reset and login capabilities.\n\nThere will need to be authorization for identifying clients vs the tutor.\n\nAdditionally, it will have proper management of financials, including invoice management\n and payment tracking. This includes things like paid/failed invoice notifications,\n unpaid invoice follow-up, summarizing d/w/m/y income, and generating reports.\n\n### Project Description\nHuman: Your task is to "The Tutor App is an app designed for tutors to manage their clients,\n schedules, and invoices.\n\nIt must support both the client and tutor scheduling, rescheduling and canceling\n appointments, and sending invoices after the appointment has passed.\n\nClients can sign up with OAuth2 or with traditional sign-in authentication. If they sign\n up with traditional authentication, it must be safe and secure. There will need to be\n password reset and login capabilities.\n\nThere will need to be authorization for identifying clients vs the tutor.\n\nAdditionally, it will have proper management of financials, including invoice management\n and payment tracking. This includes things like paid/failed invoice notifications,\n unpaid invoice follow-up, summarizing d/w/m/y income, and generating reports."\n\nAnswer as an expert product owner.\n\nyour memory is based on a google like search. When you want more information send search:<query> and I\'ll send you back the reply.\n\nyou can ask the user questions by sending ask:<query> and I\'ll send you back the reply. Make sure to ask broad questions that help guide your understanding\n\nWhen you feel you have finished getting the info you need or are confident it\'s not there, summarize the memory you\'ve built and send finished:<summary>. make sure you don\'t reply anything before the "finished:<summary>" or it will confuse the human\n\nOnly reply with one message at a time so that the user isn\'t overwhelmed.\n\nOnly reply with the specified tags.\n\nAssistant:\n search: What is an OAuth2 login?\n\n### Product Description\nTutorMaster is a comprehensive platform designed to simplify the administrative and operational tasks faced by tutors. It offers tools for managing client relationships, scheduling appointments, invoicing, and financial tracking. The app aims to provide a seamless experience for both tutors and their clients, facilitating easy scheduling, rescheduling, or cancelling of appointments. For security, TutorMaster supports OAuth2 for quick sign-ups and traditional authentication methods, equipped with secure password reset and login features. The app\'s authorization capabilities clearly distinguish between client and tutor roles, ensuring appropriate access rights. Financial management is a core feature, encompassing invoice generation, payment tracking, overdue notifications, and detailed financial reporting. TutorMaster is built on the principle of enhancing the tutor-client relationship through technology, streamlining communication, and administrative processes.\n\n### Features\n#### Secure User Authentication\n##### Description\nSupports both OAuth2 and traditional email/password sign-up methods. Features 2FA for additional security, alongside easy password reset capabilities.\n##### Considerations\nEnsuring compatibility with major OAuth providers like Google, Facebook, and LinkedIn. Traditional method must comply with security best practices.\n##### Risks\nPotential security vulnerabilities if not implemented correctly. User friction during the signup process.\n##### External Tools Required\nOAuth2 integration libraries; Email service for password resets.\n##### Priority: CRITICAL\n#### Scheduling System\n##### Description\nEnables tutors and clients to schedule, reschedule, and cancel appointments. Provides calendar views and reminders.\n##### Considerations\nTime zone handling; Availability slots for tutors; Integration with external calendars.\n##### Risks\nUser errors in scheduling; Overbooking or double-booking errors.\n##### External Tools Required\nThird-party calendar services integration.\n##### Priority: HIGH\n#### Invoice Management\n##### Description\nAutomates invoice creation following appointments. Tracks payments, sends reminders for unpaid invoices, and notifies on payment status changes.\n##### Considerations\nIntegration with payment gateways; Customizable invoice templates.\n##### Risks\nInaccurate invoice amounts; Payment gateway failures.\n##### External Tools Required\nPayment processing services; Email service for notifications.\n##### Priority: HIGH\n#### Financial Reporting\n##### Description\nGenerates reports summarizing daily, weekly, monthly, and yearly income. Tracks key metrics and highlights trends.\n##### Considerations\nUser-friendly interface for financial data; Customizable report parameters.\n##### Risks\nComplexity in understanding financial reports; Data accuracy.\n##### External Tools Required\nData visualization libraries.\n##### Priority: MEDIUM\n#### Role-based Authorization\n##### Description\nDistinguishes between tutor and client roles, granting appropriate permissions and access within the app.\n##### Considerations\nClear delineation of roles and permissions; Scalability for possible future roles.\n##### Risks\nUnauthorized access due to misconfiguration; Role confusion amongst users.\n##### External Tools Required\nNone specifically, built on underlying authentication system.\n##### Priority: HIGH\n\n### Clarifiying Questions\n- "Do we need a front end for this: "Human: Your task is to "The Tutor App is an app designed for tutors to manage their clients, schedules, and invoices. It must support both the client and tutor scheduling, rescheduling and canceling appointments, and sending invoices after the appointment has passed. Clients can sign up with OAuth2 or with traditional sign-in authentication. If they sign up with traditional authentication, it must be safe and secure. There will need to be password reset and login capabilities. There will need to be authorization for identifying clients vs the tutor. Additionally, it will have proper management of financials, including invoice management and payment tracking. This includes things like paid/failed invoice notifications, unpaid invoice follow-up, summarizing d/w/m/y income, and generating reports."": "Yes" : Reasoning: "The requirements outlined describe an application that necessitates user interaction for managing schedules, invoices, authentication, and financial tracking. A front end would be necessary to provide a user interface for tutors and clients to interact with these features, hence supporting user engagement, accessibility, and the overall functionality of the app."\n- "Who is the expected user of this: "Human: Your task is to "The Tutor App is an app designed for tutors to manage their clients, schedules, and invoices. It must support both the client and tutor scheduling, rescheduling and canceling appointments, and sending invoices after the appointment has passed. Clients can sign up with OAuth2 or with traditional sign-in authentication. If they sign up with traditional authentication, it must be safe and secure. There will need to be password reset and login capabilities. There will need to be authorization for identifying clients vs the tutor. Additionally, it will have proper management of financials, including invoice management and payment tracking. This includes things like paid/failed invoice notifications, unpaid invoice follow-up, summarizing d/w/m/y income, and generating reports."": "Tutors and clients seeking tutoring services" : Reasoning: "The Tutor App is explicitly designed to cater to two main user personas: first, the tutors, who are the primary users needing tools to manage appointments, financial transactions, and client communications efficiently. Second, the clients, individuals seeking tutoring services, who need a convenient way to schedule, reschedule, or cancel appointments, manage their invoices, and engage with their tutor. The application encompasses features that benefit both parties, aiming for streamlined communication, financial management, and scheduling efficiency. It acknowledges the varying needs and actions of both user groups, ensuring the platform is inclusive and functional for both sides of the tutoring equation."\n- "What is the skill level of the expected user of this: "Human: Your task is to "The Tutor App is an app designed for tutors to manage their clients, schedules, and invoices. It must support both the client and tutor scheduling, rescheduling and canceling appointments, and sending invoices after the appointment has passed. Clients can sign up with OAuth2 or with traditional sign-in authentication. If they sign up with traditional authentication, it must be safe and secure. There will need to be password reset and login capabilities. There will need to be authorization for identifying clients vs the tutor. Additionally, it will have proper management of financials, including invoice management and payment tracking. This includes things like paid/failed invoice notifications, unpaid invoice follow-up, summarizing d/w/m/y income, and generating reports."": "Intermediate to advanced for tutors and intermediate for clients." : Reasoning: "The expected user skill level varies between two main user personas: tutors and clients. Tutors, being the primary users, are expected to have a higher skill level, possibly intermediate to advanced, as they would be managing multiple facets of the tutoring process including scheduling, financial management, and communicating with clients. This implies a need for comfort with digital tools and possibly some financial literacy to handle invoicing and income tracking. Clients, on the other hand, primarily engage with scheduling and payments, suggesting an intermediate skill level focused on ease of user experience and straightforward interactions for booking, rescheduling, and managing payments. The distinction in skill levels underlines the need for a user-friendly interface that caters to the less tech-savvy clients while providing advanced features for tutors to manage their business effectively."\n\n\n### Conclusive Q&A\n- "How will OAuth2 be integrated, and which third-party services are planned for support?": "Planning to integrate OAuth2 with popular platforms such as Google, Facebook, and LinkedIn. This will cover the vast majority of potential users, making their signup and login process seamless and secure." : Reasoning: "Integrating OAuth2 is a critical part of the authentication system, affecting user signup and login experiences. Choosing the right services to support could enhance the app\'s accessibility and security. It\'s necessary to identify these services early in the development process to handle any specific compliance or technical challenges."\n\n\n### Requirement Q&A\n- "do we need db?": "Yes" : Reasoning: "A database is essential for storing various types of data such as user profiles, scheduled appointments, invoices, and payment records. Given the app\'s need for managing detailed client-tutor interactions, a robust and secure database is key for data organization and retrieval."\n- "do we need an api for talking to a front end?": "Yes" : Reasoning: "To facilitate communication between the app\'s front end and its backend services, an API is crucial. This will allow the front end to request and retrieve data from the backend in a structured manner, ensuring a smooth user interface experience."\n- "do we need an api for talking to other services?": "Yes" : Reasoning: "Considering the integration with OAuth2 for authentication and possibly other third-party services for functionalities like calendar scheduling or payment processing, an API for external communication is necessary. This enables secure and efficient interactions with these services."\n- "do we need an api for other services talking to us?": "Yes" : Reasoning: "To allow third-party services like OAuth2 providers or payment gateways to communicate effectively with our app, an API is required. This ensures that these services can send data to the app as needed, for instance, confirming authentication or payment transactions."\n- "do we need to issue api keys for other services to talk to us?": "Yes" : Reasoning: "For security purposes and to control and monitor access, issuing API keys to other services is important. This ensures that only authorized services can interact with the app, protecting user data and service integrity."\n- "do we need monitoring?": "Yes" : Reasoning: "To ensure the app\'s performance, security, and reliability, implementing monitoring is crucial. This will help in identifying and resolving issues promptly, improving user satisfaction and trust."\n- "do we need internationalization?": "Yes" : Reasoning: "Assuming the app aims to cater to a global audience of tutors and clients, internationalization is important. This includes supporting multiple languages and cultural nuances, making the app accessible to a wider user base."\n- "do we need analytics?": "Yes" : Reasoning: "Analytics are crucial for understanding user behavior, app performance, and financial metrics. This data will inform decision-making and strategies for app improvement and growth."\n- "is there monetization?": "Yes" : Reasoning: "Given the requirement for features like invoice management and payment tracking, it implies that the app plans to monetize its services, either directly from clients, tutors, or both."\n- "is the monetization via a paywall or ads?": "Paywall" : Reasoning: "Considering the app\'s professional context and the emphasis on financial management, a paywall (subscription or one-time purchase) would be more suitable and less intrusive than using ads."\n- "does this require a subscription or a one-time purchase?": "Subscription" : Reasoning: "To support ongoing expenses like server costs, customer support, and new feature development, a subscription model would provide a steady revenue stream, allowing the app to continuously deliver value to its users."\n- "is the whole service monetized or only part?": "Part" : Reasoning: "To encourage new users to try the app and see its value, having a freemium model where basic functionalities are free and advanced features are paid can be an effective strategy. This suggests that only part of the service would be monetized."\n- "is monetization implemented through authorization?": "Yes" : Reasoning: "Implementing monetization through authorization would allow for differentiating between free and premium users, ensuring that only those who have subscribed can access paid features. This is a common and effective method."\n- "do we need authentication?": "Yes" : Reasoning: "Given the need for secure user accounts, especially when handling personal information and financial transactions, authentication is undoubtedly required. This will protect users and their data, fostering trust in the platform."\n- "do we need authorization?": "Yes" : Reasoning: "Authorization is needed to distinguish between different user roles (clients vs tutors) and control access to certain functionalities accordingly. This ensures that users can only perform actions relevant to their role."\n- "what authorization roles do we need?": "["Client", "Tutor"]" : Reasoning: "Given the app\'s dual user base, having clear roles for clients and tutors is essential for tailoring functionality and access rights to the needs of each group. This distinction will guide the architecture of both backend and frontend."\n\n\n### Requirements\n### Functional Requirements\n#### Secure User Authentication\n##### Thoughts\nThis ensures both ease of access and a secure entry point into the app.\n##### Description\nMust support OAuth2 with Google, Facebook, and LinkedIn, and traditional email/password sign-ups with 2FA. Includes safe password reset.\n#### Scheduling System\n##### Thoughts\nScheduling is central to the app\'s functionality, enabling dynamic management of tutoring sessions.\n##### Description\nAllows tutors and clients to schedule, reschedule, and cancel appointments with calendar views and reminders.\n#### Invoice Management\n##### Thoughts\nEnsures that financial transactions are streamlined and tutors are compensated timely.\n##### Description\nAutomates invoice creation post-appointments, tracks payments, sends unpaid invoice reminders, and notifies on payment status changes.\n#### Financial Reporting\n##### Thoughts\nProvides tutors with critical insights into the financial health of their tutoring services.\n##### Description\nGenerates detailed reports of daily, weekly, monthly, and yearly earnings, highlighting key financial trends.\n#### Role-based Authorization\n##### Thoughts\nCritical for maintaining system integrity and ensuring users can only access relevant features.\n##### Description\nDistinguishes between tutor and client roles to grant appropriate permissions and access within the app.\n\n### Nonfunctional Requirements\n#### System Performance\n##### Thoughts\nVital for user retention and satisfaction, especially during scheduling and financial operations.\n##### Description\nThe system must display high performance, with response times under a few seconds for all user interactions.\n#### Security Standards\n##### Thoughts\nEssential to protect user data and build trust in the platform.\n##### Description\nAdhere to best practices in security, particularly in authentication, data encryption, and protection against common vulnerabilities.\n#### Usability\n##### Thoughts\nCrucial for ensuring accessibility to the platform\'s wide range of users.\n##### Description\nThe application must present an intuitive, user-friendly interface adaptable to both intermediate and advanced users.\n#### Scalability\n##### Thoughts\nEnsures the platform can expand to accommodate a growing user base.\n##### Description\nDesigned to efficiently handle growth in the number of users and data without degradation in performance.\n#### Compliance\n##### Thoughts\nPrevents legal issues and fosters trust.\n##### Description\nEnsure compliance with relevant legal and financial standards, especially in handling user data and financial transactions.\n\n\n### Modules\n### Module: Authentication\n#### Description\nHandles secure user authentication processes, including sign-ups, logins, and password resets. It will support OAuth2 integration with platforms like Google, Facebook, and LinkedIn, alongside traditional email/password methods, incorporating two-factor authentication (2FA) for enhanced security. This module is essential for establishing secure and accessible user access to the application.\n\n### Module: Scheduling\n#### Description\nManages the scheduling, rescheduling, and cancellation of tutoring appointments. It includes functionalities for calendar views, timing selection, and automated reminders. This module is at the core of the application, facilitating the primary interaction between tutors and clients - the booking and management of tutoring sessions.\n\n### Module: Invoice Management\n#### Description\nAutomates the creation and management of invoices following tutoring appointments. It tracks payments, sends reminders for unpaid invoices, and notifies users about payment status changes. This module is critical for maintaining the financial transactions within the system, ensuring tutors are compensated timely and clients are adequately billed.\n\n### Module: Financial Reporting\n#### Description\nGenerates comprehensive financial reports for tutors, summarizing their earnings on a daily, weekly, monthly, and yearly basis. It emphasizes key financial trends and helps tutors understand the financial health of their services. Essential for business insights, this module empowers tutors with data to make informed decisions.\n\n### Module: Role-based Access Control\n#### Description\nDefines and enforces role-based authorization within the application, distinguishing between client and tutor roles. It grants appropriate permissions and access levels to different functionalities based on the user\'s role. This module ensures that system integrity is maintained, preventing unauthorized access and enabling a secure partitioning of user capabilities within TutorMaster.\n\n### Database Design\n## TutorMaster Schema\n**Description**: This schema represents the database design for TutorMaster, covering user management, appointment scheduling, invoice handling, and financial reporting.\n**Tables**:\n**UserRole**\n\n**Description**: Enumerates user roles within the app, distinguishing between clients and tutors.\n\n**Definition**:\n```\nenum UserRole { Client Tutor }\n```\n\n**AppointmentStatus**\n\n**Description**: Enumerates the status of appointments.\n\n**Definition**:\n```\nenum AppointmentStatus { Scheduled Rescheduled Cancelled }\n```\n\n**InvoiceStatus**\n\n**Description**: Enumerates the status of invoices.\n\n**Definition**:\n```\nenum InvoiceStatus { Issued Paid Unpaid }\n```\n\n**User**\n\n**Description**: Represents both tutors and clients, including their authentication details and roles.\n\n**Definition**:\n```\nmodel User { id Int @id @default(autoincrement()) email String @unique passwordHash String? name String role UserRole oauthProvider String? oauthId String? appointments Appointment[] invoices Invoice[] }\n```\n\n**Appointment**\n\n**Description**: Tracks the scheduling of tutoring appointments.\n\n**Definition**:\n```\nmodel Appointment { id Int @id @default(autoincrement()) dateTime DateTime status AppointmentStatus tutorId Int clientId Int tutor User @relation(fields: [tutorId], references: [id]) client User @relation(fields: [clientId], references: [id]) }\n```\n\n**Invoice**\n\n**Description**: Handles financial transactions related to tutoring services.\n\n**Definition**:\n```\nmodel Invoice { id Int @id @default(autoincrement()) amount Float dateIssued DateTime datePaid DateTime? status InvoiceStatus tutorId Int clientId Int tutor User @relation(fields: [tutorId], references: [id]) client User @relation(fields: [clientId], references: [id]) }\n```\n\n**FinancialReport**\n\n**Description**: Aggregates financial data for tutors.\n\n**Definition**:\n```\nmodel FinancialReport { id Int @id @default(autoincrement()) income Float periodStart DateTime periodEnd DateTime tutorId Int tutor User @relation(fields: [tutorId], references: [id]) }\n```\n\n"""

    module_gen_block = ModuleGenerationBlock(    )
    module_ref_block = ModuleRefinementBlock(    )

    async def run_ai() -> dict[str, ModuleResponse | ModuleRefinement]:
        await db_client.connect()
        module_gen: ModuleResponse = await module_gen_block.invoke(
            ids=ids,
            invoke_params={
                "NEST_JS_FIRST_STEPS": NEST_JS_FIRST_STEPS,
                "NEST_JS_MODULES": NEST_JS_MODULES,
                "NEST_JS_SQL": NEST_JS_SQL,
                "NEST_JS_CRUD_GEN": NEST_JS_CRUD_GEN,
                "product_description": product_description,
                "joint_q_and_a": joint_q_and_a,
                "requirements_q_and_a_string": requirements_q_and_a_string,
                "requirements": requirements_as_string,
            },
        )
        module_ref: ModuleRefinement = await module_ref_block.invoke(
            ids=ids,
            invoke_params={
                "system_requirements": system_spec,
                "module_list": ", ".join(
                    [module.name for module in module_gen.modules]
                ),
            },
        )

        await db_client.disconnect()
        return {"module_gen": module_gen, "module_ref": module_ref}

    modules = run(run_ai())

    for key, item in modules.items():
        if isinstance(item, ModuleResponse):
            logger.info(f"ModuleResponse {key}")
            logger.info(f"\tThought General: {item.think_general}")
            logger.info(f"\tThought Anti: {item.think_anti}")

            for m in item.modules:
                logger.info(f"\t\tModule Name: {m.name}")
                logger.info(f"\t\tModule Description: {m.description}")
                logger.info(f"\t\tModule Requirements: {m.requirements}")
                logger.info(f"\t\tModule Endpoints: {m.endpoints}")
                logger.info(f"\t\tModule Related Modules: {m.related_modules}")
        elif isinstance(item, ModuleRefinement):
            logger.info(f"ModuleRefinement {key}")
            for module in item.modules:
                logger.info(f"\tModule Name: {module.module_name}")
                logger.info(f"\tRough Requirements: {module.rough_requirements}")
                logger.info(f"\tThoughts: {module.thoughts}")
                logger.info(f"\tNew Description: {module.new_description}")
                logger.info("\tModule Requirements:")
                for requirement in module.module_requirements:
                    logger.info(f"\t\tRequirement Name: {requirement.name}")
                    logger.info(
                        f"\t\tRequirement Description: {requirement.description}"
                    )
                logger.info(f"\tModule Links: {','.join(module.module_links)}")
                logger.info(
                    f"\tEndpoint Groups List: {', '.join(module.endpoint_groups_list or [])}"
                )
                logger.info(f"\tEndpoints: {module.endpoint_groups}")
                for endpoint_group in module.endpoint_groups:
                    logger.info(
                        f"\t\tEndpoint Group Category: {endpoint_group.group_category}"
                    )
                    for endpoint in endpoint_group.endpoints:
                        logger.info(f"\t\t\tEndpoint Name: {endpoint.name}")
                        logger.info(f"\t\t\tEndpoint Type: {endpoint.type}")
                        logger.info(
                            f"\t\t\tEndpoint Description: {endpoint.description}"
                        )
                        logger.info(f"\t\t\tEndpoint Path: {endpoint.path}")
        else:
            logger.info("????")
            breakpoint()

    # # If you want to test the block in an interactive environment
    # import IPython

    # IPython.embed()
    breakpoint()
