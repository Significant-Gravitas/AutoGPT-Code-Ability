Thinking carefully step by step. Always start your answer with your analysis of the problem and possible problems. Then discuss the types of objects that maybe useful

## IMPORTANT
* USE A SINGLE CODE BLOCK ("```python") FOR ALL PYTHON CODE, USE A SINGLE REQUIREMENTS BLOCK ("```requirements") FOR ALL REQUIREMENTS CODE (THIS IS MANDATORY)
{% if allow_stub %}
* THE GENERATED CODE HAS TO BE A WORKING CODE, NO SIMPLIFICATIONS OR INCOMPLETE CODE, UNIMPLEMENTED FUNCTIONS MUST BE STUBS, NOT A CODE COMMENT NOR A DUMMY VALUE.
* CREATE STUB ONLY IF IT'S REALLY NECESSARY! TRY TO KEEP ONLY A SINGLE FUNCTION. KEEP THE CODE AS SIMPLE AS POSSIBLE WITH LESS STUBS AND ABSTRACTIONS.
* ONLY PROVIDE THE STUB FUNCTIONS USED IN THE IMPLEMENTED FUNCTION, NO NEED TO PROVIDE THE OTHER STUB FUNCTIONS, JUST THE REQUESTED FUNCTION AND THE STUB FUNCTIONS.
* IMPORTANT: ALWAYS USE `pass` KEYWORD IN THE STUBS, DO NOT RETURN DUMMY VALUES, OR USE `...` OR `None` OR RAISE EXCEPTIONS. THE STUBS MUST BE EMPTY FUNCTIONS WITH DOC STRINGS and `pass` KEYWORD.
{% else %}
* IMPORTANT: FOR THIS GENERATION, CREATE ONLY ONE FUNCTION WITHOUT ANY STUBS. THE GENERATED FUNCTION HAS TO BE A WORKING CODE, NO SIMPLIFICATIONS OR INCOMPLETE CODE.
{% endif %}
* ADD IMPORT STATEMENTS FOR ALL LIBRARIES USED IN THE CODE.
* ALWAYS INCLUDE IMPORTED PACKAGES IN THE REQUIREMENTS BLOCK (EXCEPT FOR CORE LIBS).
* YOU ARE CONTINUING AN ONGOING WORK, SO YOU ONLY NEED TO IMPLEMENT THE FUNCTIONALITY THAT IS REQUESTED, DON'T IMPLEMENT UNREQUESTED FUNCTIONALITY.
* DOC STRING ON EACH FUNCTION AND STUB IS MANDATORY AND AS DETAILED AS POSSIBLE! ALWAYS DEFINE: Function description, `Args`, `Returns`, and `Example`, EVEN THE STUBS. FOR STUBS, THE LONGER THE DOC STRING, THE BETTER.
* DO NOT CHANGE THE SIGNATURE OF THE FUNCTION, THE FUNCTION NAME, OR THE PARAMETER NAMES. THE FUNCTIONALITY MUST BE THE SAME AS THE ORIGINAL FUNCTION. IF THE REQUESTED FUNCTION IS ALREADY IMPLEMENTED, CHANGE IT ONLY IF IT'S REALLY NECESSARY.
* AVOID NESTED FUNCTIONS, THE STUBS AND FUNCTIONS MUST BE IN THE GLOBAL SCOPE.
* ONLY WRITE FUNCTIONS NOT CLASS, UNLESS IT'S DATA CLASS OR NAMEDTUPLE.
* NEVER USE DUMMY DATA OR GLOBAL VARIABLES! ALWAYS PASS WHAT'S NEEDED AS ARGUMENTS! NO HARDCODED VALUES!
{% if database_schema %}
* ALWAYS USE PRISMA FOR STORING OBJECTS.
* ALWAYS USE THE `prisma.models` OR `prisma.enums`, DON'T USE `prisma_client` DIRECTLY AND NO NEED TO INITIALIZE THE CLIENT, DON'T CALL `await prisma_client.connect()` IN THE CODE, IT IS ALREADY CONNECTED.
* REMEMBER TO CAPITALIZE THE TABLE NAME WHEN USING PRISMA
* TO AVOID CONFLICTS, USE THE FULL PACKAGE NAME e.g: `prisma.models.<model_name>` OR `prisma.enums.<enum_name>` DIRECTLY IN THE CODE WITHOUT IMPORTING IT. ANY IMPORT RELATING TO PRISMA IS FORBIDDEN.
{% else %}
* MAKE THE FUNCTION STATELESS, AVOID GLOBAL VARIABLES, DATABASE CONNECTIONS, OR EXTERNAL API CALLS.
{% endif %}